spring:
  session:
    store-type: jdbc
    # spring.session.jdbc.initialize-schema: always 설정이 있어야만
    # JPA가 자동으로 세션 저장용 테이블을 생성한다.
    jdbc:
      initialize-schema: always
  jpa:
    database-platform: org.hibernate.dialect.H2Dialect
    open-in-view: false
    hibernate:
      ddl-auto: create
    properties:
      hibernate:
        show_sql: true
        format_sql: true
        default_batch_fetch_size: 100
  h2:
    console:
      enabled: true
      path: /h2-console
  datasource:
    url: jdbc:h2:mem:sociallogin
    username: sa
    password:
    driver-class-name: org.h2.Driver
  security:
    jwt:
      expire-time: 10000000000
      secret-key: aasjjkjaskjdl1kqweqwwrwqedqwdwqdwqdw2naskjkdakj34c8sa
    oauth2:
      client:
        registration:
          kakao:
            client-id: fabf0d4884d26a6ee843a213753a2a90
            redirect-uri: http://4c3ca1c0d1466f.localhost.run/
          google:
            client-id: 372215357018-ev5mcnk40h0ebjb4ilbh5li3rn6gikaf.apps.googleusercontent.com
            client-secret: xIAErqdLzF9XzCmDlgZ-RMze
            scope: profile,email
          naver:
            client-id: 6CH2XYkrpHJGtQmV3PZE
            client-secret: vv3UrjXUXn
            redirect-uri: http://ec2-3-35-173-229.ap-northeast-2.compute.amazonaws.com:8080/
            authorization-grant-`type: authorization_code
            scope: name,email
            client-name: Naver
        provider:
          naver:
            authorization-uri: https://nid.naver.com/oauth2.0/authorize
            token-uri: https://nid.naver.com/oauth2.0/token
            user-info-uri: https://openapi.naver.com/v1/nid/me
            user-name-attribute: response

